package com.dzd.sms.api.controller;

import static com.dzd.sms.application.Define.INTERFACE_STATE_BALANCE_NONE;
import static com.dzd.sms.application.Define.INTERFACE_STATE_PARAM_ERROR;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dzd.phonebook.page.MobileCheckUtil;
import com.dzd.phonebook.service.UserMessageService;
import com.dzd.phonebook.util.AccessTimeControlUtil;
import com.dzd.sms.api.service.SmsQueryBusiness;
import com.dzd.sms.api.service.SmsServiceV4;
import com.dzd.sms.application.Define;
import com.dzd.sms.application.SmsServerManager;
import com.dzd.sms.service.data.CustomParameter;
import com.dzd.sms.service.data.SmsPullReport;
import com.dzd.sms.service.data.SmsReciveReply;
import com.dzd.sms.service.data.SmsRequestParameter;
import com.dzd.sms.service.data.SmsState;
import com.dzd.sms.service.data.SmsUser;
import com.dzd.utils.DateUtil;
import com.dzd.utils.NetUtil;
import com.dzd.utils.StringUtil;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * 短信接口V2版本 Author: WHL
 */

@Controller
@RequestMapping("/v4/sms")
public class SmsHttpInterfaceV4
{
	static Logger logger = Logger.getLogger(SmsHttpInterfaceV4.class);
	// 服务操作类
	SmsServiceV4 smsServiceV4 = new SmsServiceV4();

	@SuppressWarnings("rawtypes")
	@Autowired
	private UserMessageService userMessageService;

	/**
	 * 发送短信接口
	 *
	 * @param request
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value = "/send")
	@ResponseBody
	public JSONObject send(HttpServletRequest request, SmsRequestParameter requestParameter)
	        throws UnsupportedEncodingException
	{
		JSONObject result = new JSONObject();
		JSONObject object = new JSONObject();

		if ( smsServiceV4.cehckNullParameter(requestParameter, Define.INTERFACEKEY.SEND) )
		{
			SmsState smsState = Define.INTERFACE_STATE_PARAM_ERROR;// 参数不足或参数内容为空.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			return object;
		}
		// 访问次数限制--每秒钟内只能跑10个线程
		if ( AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.ACCESS_TIME, requestParameter.getUid(), true) )
		{
			SmsState smsState = Define.INTERFACE_STATE_ACCESS_TIME;// 访问次数过多，请稍后访问.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			return object;
		}

		CustomParameter parameter = new CustomParameter();
		requestParameter.setText(URLDecoder.decode(requestParameter.getText(), "UTF-8"));

		requestParameter.setIid(Define.STATICAL.CUSTOMNUMBER);
		requestParameter.setSysId(requestParameter.getUid());
		requestParameter.setCheck(true);
		
		SmsUser smsUsers = SmsServerManager.I.getUser(Long.valueOf(requestParameter.getUid()));
		if ( smsUsers != null )
		{
			requestParameter.setUid(smsUsers.getId().toString());
			requestParameter.setGroupTypeId(smsUsers.getAisleGroupId().longValue());
		} else
		{
			SmsState smsState = Define.INTERFACE_STATE_BALANCE_NONE;// 帐户不存在
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			logger.error(" uid=" + requestParameter.getUid() + " 没有找到用户。"
			        + "   smsUser is null, and aisleGroupId is null");
			
			AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.ACCESS_TIME, requestParameter.getUid(), false); 
			return object;
		}

		Map<String, Object> param = new HashMap<String, Object>();
		param.put(Define.STATICAL.SMSID, smsUsers.getId());
		String smsUserSign = userMessageService.querySmsUserSign(param);
		requestParameter.setSmsUserSign(smsUserSign);
		
		String text = requestParameter.getText();
		int signStartPos = text.indexOf("【");
		int signEndPos = text.indexOf("】");

		String sign = null;

		if ( signStartPos == 0 && signEndPos > 0 )
		{
			sign = text.substring(signStartPos + 1, signEndPos);
		}
		if ( StringUtils.isEmpty(sign) )
		{
			SmsState smsState = Define.INTERFACE_STATE_SIGN_NOEXSITS;// 短信签名不存在.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			
			AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.ACCESS_TIME, requestParameter.getUid(), false); 
			return object;
		}

		// 2. 根据号码，对号码进行分类
		getValidPhoneNumber(requestParameter, parameter);

		// 发送短信：进行相关号码、内容校验，价格等数据处理，并设置redis缓存
		result = smsServiceV4.send(result, requestParameter, parameter);

		object.put(Define.RESULTSTATE.CODE, result.get(Define.RESULTSTATE.CODE));
		object.put(Define.RESULTSTATE.MSG, result.get(Define.RESULTSTATE.MSG));
		result.remove(Define.RESULTSTATE.CODE);
		result.remove(Define.RESULTSTATE.MSG);
		result.put(Define.RESULTSTATE.ERRORPHONES, parameter.getErrorPhones());
		object.put(Define.RESULTSTATE.RESULT, result);
		
		AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.ACCESS_TIME, requestParameter.getUid(), false); 
		
		return object;
	}

	private void getValidPhoneNumber(SmsRequestParameter requestParameter,
	        CustomParameter parameter)
	{
		try
		{
			String phone = requestParameter.getMobile().get(0);
			String[] phones = phone.split(",");
			List<String> phoneList = Arrays.asList(phones);
			// 分出重复号码、无效号码、有效号码
			Map<String, List<String>> smsMap = MobileCheckUtil.mobileAssort(phoneList);
			// 错误号码数
			List<String> invalids = smsMap.get(Define.PHONEKEY.INVALID);
			List<String> duplicates = smsMap.get(Define.PHONEKEY.DUPLICATE);
			parameter.setErrorPhoneNumber(invalids.size() + duplicates.size());

			invalids.addAll(duplicates);
			StringBuilder result = new StringBuilder();
			boolean flag = false;
			for ( String ph : invalids )
			{
				if ( flag )
				{
					result.append(",");
				} else
				{
					flag = true;
				}
				result.append(ph);
			}
			parameter.setErrorPhones(result.toString());
			// 有效号码个数
			parameter.setVailPhoneNumber(smsMap.get(Define.PHONEKEY.VALID).size());
			// 所有号码
			parameter.setAllPhoneNumber(phoneList.size());

			// 有效号码集合
			requestParameter.setMobile(smsMap.get(Define.PHONEKEY.VALID));

		} catch (Exception e)
		{
			e.printStackTrace();
			logger.error("号码进行分类发生错误：" + e.getMessage());
		}
	}

	/**
	 * 获取状态报告
	 *
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/pull_status")
	@ResponseBody
	public String pull_status(HttpServletRequest request, SmsRequestParameter requestParameter)
	{
		CustomParameter parameter = new CustomParameter();
		JSONObject object = new JSONObject();

		// 校验入参数据是否有空数据
		if ( smsServiceV4.cehckNullParameter(requestParameter, Define.INTERFACEKEY.PULL_STATUS) )
		{
			SmsState smsState = Define.INTERFACE_STATE_PARAM_ERROR;// 参数不足或参数内容为空.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			return object.toString();
		}
		// 访问次数限制--每秒钟内只能跑10个线程
		if ( AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.PULL_STATUS_TIME, requestParameter.getUid(), true) )
		{
			SmsState smsState = Define.INTERFACE_STATE_ACCESS_TIME;// 访问次数过多，请稍后访问.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			return object.toString();
		}
		// 设置页数
		SmsQueryBusiness.setPageLimit(requestParameter, parameter);

		parameter.setUserId(0l);
		parameter.setValid(true);
		preParameter(requestParameter, parameter);

		// 校验用户账户等信息
		SmsQueryBusiness.checkUserInfo(requestParameter, parameter, false, null);

		JSONArray sms_status = new JSONArray();

		// JSONObject item = new JSONObject();
		// item.put("sid ", 9527);
		// item.put("state", "");
		// item.put("user_receive_time", "2014-03-17 22:55:23");
		// item.put("mobile", "13530253280");
		// sms_status.add(item);

		if ( parameter.isValid() && parameter.getUserId() > 0 )
		{
			Map<String, Object> param = new HashMap<String, Object>();
			param.put(Define.STATICAL.USERID, parameter.getUserId());
			param.put(Define.STATICAL.LIMIT, parameter.getLimit());

			List<SmsPullReport> smsPullReports = null;
			try
			{
				smsPullReports = userMessageService.getSmsPullReport(param);

				smsServiceV4.updateSmsPullReport(smsPullReports);
			} catch (Exception e)
			{
				AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.PULL_STATUS_TIME, requestParameter.getUid(), false);
			}

			JSONObject item;
			for ( SmsPullReport smsPullReport : smsPullReports )
			{
				item = new JSONObject();
				item.put(Define.STATICAL.SID, smsPullReport.getTaskId());
				item.put(Define.STATICAL.STATE, smsPullReport.getState());
				item.put(Define.STATICAL.USER_RECEIVE_TIME,
				        DateUtil.formatDateTime(smsPullReport.getCreateTime()));
				item.put(Define.STATICAL.MOBILE, smsPullReport.getMobile());
				sms_status.add(item);
			}
		}

		object.put(Define.RESULTSTATE.CODE, parameter.getCode());
		object.put(Define.RESULTSTATE.MSG, parameter.getMsg());
		object.put(Define.RESULTSTATE.SMS_STATUS, sms_status);
		
		AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.PULL_STATUS_TIME, requestParameter.getUid(), false);
		
		return object.toString();
	}

	private void preParameter(SmsRequestParameter requestParameter, CustomParameter parameter)
	{
		requestParameter.setSysId(requestParameter.getUid());

		SmsUser smsUsers = SmsServerManager.I.getUser(Long.valueOf(requestParameter.getUid()));
		if ( smsUsers != null )
		{
			requestParameter.setUid(smsUsers.getId().toString());
		} else
		{
			parameter.setCode(INTERFACE_STATE_BALANCE_NONE.code);
			parameter.setMsg(INTERFACE_STATE_BALANCE_NONE.message);
		}
	}

	/**
	 * 查回复的短信
	 *
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/get_reply")
	@ResponseBody
	public String get_reply(HttpServletRequest request, SmsRequestParameter requestParameter)
	{
		JSONArray sms_reply = new JSONArray();
		CustomParameter parameter = new CustomParameter();
		JSONObject object = new JSONObject();

		if ( smsServiceV4.cehckNullParameter(requestParameter, Define.INTERFACEKEY.GET_REPLY) )
		{
			SmsState smsState = Define.INTERFACE_STATE_PARAM_ERROR;// 参数不足或参数内容为空.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			return object.toString();
		}
		// 访问次数限制--每秒钟内只能跑10个线程
		if ( AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.GET_REPLY_TIME, requestParameter.getUid(), true) )
		{
			SmsState smsState = Define.INTERFACE_STATE_ACCESS_TIME;// 访问次数过多，请稍后访问.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			return object.toString();
		}
		// 验证参数
		String start_time_valid = DateUtil
		        .formatDateTime(DateUtil.parseDateTime(requestParameter.getStart_time()));
		String end_time_valid = DateUtil
		        .formatDateTime(DateUtil.parseDateTime(requestParameter.getEnd_time()));
		// int page_num_valid = Integer.valueOf(requestParameter.getPage_num());
		int page_size_valid = StringUtils.isEmpty(requestParameter.getPage_size()) ? 20
		        : Integer.valueOf(requestParameter.getPage_size());

		if ( page_size_valid > 1000 )
		{
			page_size_valid = 1000;
		}

		if ( !CollectionUtils.isEmpty(requestParameter.getMobile())
		        && requestParameter.getMobile().size() < 11 )
		{
			requestParameter.setMobile(null);
		}

		parameter.setValid(true);
		// 验证参数， 是否带完整
		parameter.setUserId(0l);
		preParameter(requestParameter, parameter);
		// 校验用户账户等信息
		SmsQueryBusiness.checkUserInfo(requestParameter, parameter, false, null);

		if ( parameter.isValid() && parameter.getUserId() > 0 )
		{
			// 获取用户回复信息
			Map<String, Object> param = new HashMap<String, Object>();
			param.put(Define.STATICAL.USERID, parameter.getUserId());
			param.put(Define.STATICAL.LIMIT, page_size_valid);
			param.put(Define.STATICAL.STARTTIME, start_time_valid);
			param.put(Define.STATICAL.ENDTIME, end_time_valid);
			if ( !CollectionUtils.isEmpty(requestParameter.getMobile()) )
			{
				param.put(Define.STATICAL.MOBILES, requestParameter.getMobile().toArray());
			}
			List<SmsReciveReply> smsReplys = userMessageService.getSmsReply(param);

			smsServiceV4.updateSmsReply(smsReplys);

			for ( SmsReciveReply smsReply : smsReplys )
			{
				JSONObject item = new JSONObject();
				item.put(Define.STATICAL.TEXT, smsReply.getContent());
				item.put(Define.STATICAL.REPLY_TIME,
				        DateUtil.formatDateTime(smsReply.getCreateTime()));
				item.put(Define.STATICAL.MOBILE, smsReply.getMobile());
				sms_reply.add(item);
			}
		}

		object.put(Define.RESULTSTATE.CODE, parameter.getCode());
		object.put(Define.RESULTSTATE.MSG, parameter.getMsg());
		object.put(Define.STATICAL.SMS_REPLY, sms_reply);
		
		AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.GET_REPLY_TIME, requestParameter.getUid(), false);
		
		return object.toString();
	}

	/**
	 * 查询帐户余额
	 *
	 * @return
	 */
	@RequestMapping(value = "/get_balance")
	@ResponseBody
	public String get_balance(HttpServletRequest request, SmsRequestParameter requestParameter)
	{
		JSONObject result = new JSONObject();
		CustomParameter parameter = new CustomParameter();
		JSONObject object = new JSONObject();

		if ( smsServiceV4.cehckNullParameter(requestParameter, Define.INTERFACEKEY.GET_BALANCE) )
		{
			object.put(Define.RESULTSTATE.CODE, INTERFACE_STATE_PARAM_ERROR.code);
			object.put(Define.RESULTSTATE.MSG, INTERFACE_STATE_PARAM_ERROR.message);
			object.put(Define.RESULTSTATE.RESULT, result);

			return object.toString();
		}
		// 访问次数限制--每秒钟内只能跑10个线程
		if ( parameter.isValid()
		        && AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.GET_BALANCE_TIME, requestParameter.getUid(), true) )
		{
			SmsState smsState = Define.INTERFACE_STATE_ACCESS_TIME;// 访问次数过多，请稍后访问.
			object.put(Define.RESULTSTATE.CODE, smsState.code);
			object.put(Define.RESULTSTATE.MSG, smsState.message);
			return object.toString();
		}

		parameter.setValid(true);

		parameter.setUserId(0l);
		preParameter(requestParameter, parameter);
		// 校验用户账户等信息
		SmsQueryBusiness.checkUserInfo(requestParameter, parameter, true, result);

		object.put(Define.RESULTSTATE.CODE, parameter.getCode());
		object.put(Define.RESULTSTATE.MSG, parameter.getMsg());
		object.put(Define.RESULTSTATE.RESULT, result);
		
		 AccessTimeControlUtil.fitlerAccessTime(AccessTimeControlUtil.GET_BALANCE_TIME, requestParameter.getUid(), false); 
		
		return object.toString();
	}

	///////////////////////////////////////// 分割线， 以下是测试方法
	///////////////////////////////////////// //////////////////////////////////
	@RequestMapping(value = "/sendtest")
	@ResponseBody
	public Object sendtest()
	{

		Map<String, String> params = new HashMap<String, String>();

		// params.put("mobile","13828801788,15019430438,13923806487,13902318405,13925292460,13825286244,15814656101,13827495759,15907554586,13509688357,13828707790,13902997398,13902940078,13923803583,13923719027,15999623919,13902941973,13923462018,13828721369,13927495990,13923753837,13923894976,13902984360,13827473255,13926532824,13902932962,13828753622,13923860185,13828843082,13828793326,13924646587,13828807091,13828752999,15814488749,13923893947,13923792000,13925274929,13923833389,13826542726,15817439096,13924606114,13925225476,13827461819,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13380022285,18565711065,,,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13922878227,13828755529,13925251464,13923752469,13922818699,13923886234,13902973791,15999519978,13823556966,13826509958,13688845341,13927438403,13825280336,15813884078,13902989058,18820277600,13923815889,15820462011,13902432811,13924601918,13825287695,13924587578,13902906963,13925213482,13902975334,15986699845,15919974328,13923469911,13924601789,13826560002,13827443974,13926536493,13903025058,13923813945,13923771101,13828766631,15816885558,13923889137,15994781364,13902973126,13923707428,13922843848,13902902010");

		// params.put("mobile",
		// "13828801788,15019430438,13923806487,13902318405,13925292460,13825286245,15814656102,13825286246,15814656107,15814656108,13021082417,13021082418,13021082419,13021082420,13021082421,13021082422,13021082423,13021082424,13021082425,13021082426");

		String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		String sign = StringUtil.string2MD5(1 + "5a7ed0bf8096e5e433364c219c0d7757" + timestamp);

		params.put("uid", "1");
		params.put("timestamp", timestamp);
		params.put("mobile", "15019474298");
		params.put("text", "【测试】测试短信内容");
		params.put("sign", sign);
		params.put("iid", "110");

		String re = "";
		try
		{
			// String re = NetUtil.post(this.sendUrl, params);
			re = NetUtil.post("http://localhost:8080/sms_agent_web/v4/sms/send.do", params);
		} catch (Exception e)
		{
			e.printStackTrace();
		}

		JSONObject object = new JSONObject();
		object.put("msg", re);
		object.put("time", new Date().getTime());

		System.out.println(re);
		return object;
	}

	@RequestMapping(value = "/pulltest")
	@ResponseBody
	public Object pulltest()
	{
		Map<String, String> params = new HashMap<String, String>();

		Date nowTime = new Date();
		SimpleDateFormat time = new SimpleDateFormat("yyyyMMddHHmmss");
		String timestamp = time.format(nowTime);
		String sign = StringUtil
		        .string2MD5("zhangsang@qq.com" + "5a7ed0bf8096e5e433364c219c0d7757" + timestamp);

		params.put("uid", "1");
		// params.put("mobile","13828801788,15019430438,13923806487,13902318405,13925292460,13825286244,15814656101,13827495759,15907554586,13509688357,13828707790,13902997398,13902940078,13923803583,13923719027,15999623919,13902941973,13923462018,13828721369,13927495990,13923753837,13923894976,13902984360,13827473255,13926532824,13902932962,13828753622,13923860185,13828843082,13828793326,13924646587,13828807091,13828752999,15814488749,13923893947,13923792000,13925274929,13923833389,13826542726,15817439096,13924606114,13925225476,13827461819,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13380022285,18565711065,,,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13922878227,13828755529,13925251464,13923752469,13922818699,13923886234,13902973791,15999519978,13823556966,13826509958,13688845341,13927438403,13825280336,15813884078,13902989058,18820277600,13923815889,15820462011,13902432811,13924601918,13825287695,13924587578,13902906963,13925213482,13902975334,15986699845,15919974328,13923469911,13924601789,13826560002,13827443974,13926536493,13903025058,13923813945,13923771101,13828766631,15816885558,13923889137,15994781364,13902973126,13923707428,13922843848,13902902010");
		// params.put("mobile",
		// "13828801788,15019430438,13923806487,13902318405,13925292460,13825286245,15814656102,13825286246,15814656107,15814656108,13021082417,13021082418,13021082419,13021082420,13021082421,13021082422,13021082423,13021082424,13021082425,13021082426");
		// params.put("mobile
		params.put("timestamp", timestamp);
		params.put("sign", sign);
		String re = "";
		try
		{
			// String re = NetUtil.post(this.sendUrl, params);
			re = NetUtil.post("http://localhost:8080/sms_agent_web/v4/sms/pull_status.do", params);
		} catch (Exception e)
		{
			e.printStackTrace();
		}

		JSONObject object = new JSONObject();
		object.put("msg", re);
		object.put("time", new Date().getTime());

		System.out.println(re);
		return object;
	}

	@RequestMapping(value = "/balancetest")
	@ResponseBody
	public Object balancetest()
	{

		Map<String, String> params = new HashMap<String, String>();

		String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		String sign = StringUtil.string2MD5(1 + "5a7ed0bf8096e5e433364c219c0d7757" + timestamp);

		params.put("uid", "1");
		// params.put("mobile","13828801788,15019430438,13923806487,13902318405,13925292460,13825286244,15814656101,13827495759,15907554586,13509688357,13828707790,13902997398,13902940078,13923803583,13923719027,15999623919,13902941973,13923462018,13828721369,13927495990,13923753837,13923894976,13902984360,13827473255,13926532824,13902932962,13828753622,13923860185,13828843082,13828793326,13924646587,13828807091,13828752999,15814488749,13923893947,13923792000,13925274929,13923833389,13826542726,15817439096,13924606114,13925225476,13827461819,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13380022285,18565711065,,,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13922878227,13828755529,13925251464,13923752469,13922818699,13923886234,13902973791,15999519978,13823556966,13826509958,13688845341,13927438403,13825280336,15813884078,13902989058,18820277600,13923815889,15820462011,13902432811,13924601918,13825287695,13924587578,13902906963,13925213482,13902975334,15986699845,15919974328,13923469911,13924601789,13826560002,13827443974,13926536493,13903025058,13923813945,13923771101,13828766631,15816885558,13923889137,15994781364,13902973126,13923707428,13922843848,13902902010");

		// params.put("mobile",
		// "13828801788,15019430438,13923806487,13902318405,13925292460,13825286245,15814656102,13825286246,15814656107,15814656108,13021082417,13021082418,13021082419,13021082420,13021082421,13021082422,13021082423,13021082424,13021082425,13021082426");

		// params.put("mobile
		params.put("timestamp", timestamp);
		params.put("sign", sign);
		String re = "";
		try
		{
			// String re = NetUtil.post(this.sendUrl, params);
			re = NetUtil.post("http://localhost:8080/sms_agent_web/v4/sms/get_balance.do", params);
		} catch (Exception e)
		{
			e.printStackTrace();
		}

		JSONObject object = new JSONObject();
		object.put("msg", re);
		object.put("time", new Date().getTime());

		System.out.println(re);
		return object;
	}

	@RequestMapping(value = "/replytest")
	@ResponseBody
	public Object replytest()
	{

		Map<String, String> params = new HashMap<String, String>();

		Date nowTime = new Date();
		SimpleDateFormat time = new SimpleDateFormat("yyyyMMddHHmmss");
		String timestamp = time.format(nowTime);
		String start_time = time.format(new Date(Long.valueOf("20160330111525")));
		String end_time = time.format(nowTime);
		String sign = StringUtil.string2MD5(1 + "5a7ed0bf8096e5e433364c219c0d7757" + timestamp);

		params.put("uid", "1");
		// params.put("mobile","13828801788,15019430438,13923806487,13902318405,13925292460,13825286244,15814656101,13827495759,15907554586,13509688357,13828707790,13902997398,13902940078,13923803583,13923719027,15999623919,13902941973,13923462018,13828721369,13927495990,13923753837,13923894976,13902984360,13827473255,13926532824,13902932962,13828753622,13923860185,13828843082,13828793326,13924646587,13828807091,13828752999,15814488749,13923893947,13923792000,13925274929,13923833389,13826542726,15817439096,13924606114,13925225476,13827461819,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13380022285,18565711065,,,15914067363,13510761175,15989388118,13530253280,15188200426,15012955185,15150475366,13922878227,13828755529,13925251464,13923752469,13922818699,13923886234,13902973791,15999519978,13823556966,13826509958,13688845341,13927438403,13825280336,15813884078,13902989058,18820277600,13923815889,15820462011,13902432811,13924601918,13825287695,13924587578,13902906963,13925213482,13902975334,15986699845,15919974328,13923469911,13924601789,13826560002,13827443974,13926536493,13903025058,13923813945,13923771101,13828766631,15816885558,13923889137,15994781364,13902973126,13923707428,13922843848,13902902010");

		// params.put("mobile",
		// "13828801788,15019430438,13923806487,13902318405,13925292460,13825286245,15814656102,13825286246,15814656107,15814656108,13021082417,13021082418,13021082419,13021082420,13021082421,13021082422,13021082423,13021082424,13021082425,13021082426");

		// params.put("mobile
		params.put("timestamp", timestamp);
		params.put("start_time", "");
		params.put("end_time", "");
		params.put("sign", sign);
		params.put("page_num", "1");
		params.put("page_size", "10");
		String re = "";
		try
		{
			// String re = NetUtil.post(this.sendUrl, params);
			re = NetUtil.post("http://localhost:8080/sms_agent_web/v4/sms/get_reply.do", params);
		} catch (Exception e)
		{
			e.printStackTrace();
		}

		JSONObject object = new JSONObject();
		object.put("msg", re);
		object.put("time", new Date().getTime());

		System.out.println(re);
		return object;
	}

	@RequestMapping(value = "/queryBalance")
	@ResponseBody
	public Object queryBalance()
	{

		return "ok";
	}

	@RequestMapping(value = "/queryReply")
	@ResponseBody
	public Object queryReply()
	{

		return "ok";
	}

	@RequestMapping(value = "/queryReport")
	@ResponseBody
	public Object queryReport()
	{

		return "ok";
	}

	@RequestMapping(value = "/queryuser")
	@ResponseBody
	public Object queryUser(HttpServletRequest request)
	{

		return "";
	}

	@RequestMapping(value = "/queryuserblank")
	@ResponseBody
	public Object queryUserBlank(HttpServletRequest request)
	{
		Long userId = Long.valueOf(request.getParameter("id"));
		return userId;
	}

	@RequestMapping(value = "/pushReportTest")
	@ResponseBody
	public Object pushReportTest()
	{

		return " pushReportTest ok";
	}

	@RequestMapping(value = "/pushReplyTest")
	@ResponseBody
	public Object pushReplyTest()
	{

		return " pushReplyTest ok";
	}

}
